name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      - name: Debug Maven Dependencies
        run: |
          cd backend
          mvn dependency:tree

      - name: Remove and Reinstall Maven Dependencies
        run: |
          cd backend
          rm -rf ~/.m2/repository
          mvn clean install -U -DskipTests

      - name: Verify JUnit Exists
        run: |
          cd backend
          mvn dependency:tree | grep "junit"

      - name: Run Backend Tests (JUnit + Mockito)
        run: |
          cd backend
          mvn test

      - name: Generate JaCoCo Test Coverage Report
        run: |
          cd backend
          mvn jacoco:report

      - name: Upload JaCoCo Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/target/site/jacoco

  build-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Frontend Tests (Vitest)
        run: |
          cd frontend
          npm test

      - name: Build Frontend (Vite)
        run: |
          cd frontend
          npm run build

  sonar-qube-analysis:
    name: Analyze Backend & Frontend
    runs-on: ubuntu-latest

    steps:
      # üîπ Cache SonarQube Dependencies
      - name: Cache SonarQube Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # üîπ Backend - Run SonarQube Analysis
      - name: SonarQube Scan (Backend)
        run: |
          cd backend
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=singhparveet_todo-app \
            -Dsonar.organization=singhparveet \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      # üîπ Run ESLint & SonarQube Scan for Frontend
      - name: SonarQube Scan (Frontend)
        run: |
          cd frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx || true  # Ignore ESLint errors but log them
          npx sonar-scanner \
            -Dsonar.projectKey=singhparveet_todo-app \
            -Dsonar.organization=singhparveet \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=frontend/src \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      
      - name: Check SonarQube Quality Gate
        run: |
          sleep 10 # Wait for SonarQube to process results
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=singhparveet_todo-app" | jq -r .projectStatus.status)
          if [[ "$STATUS" != "OK" ]]; then
            echo "‚ùå Quality Gate Failed!"
            exit 1
          fi
        shell: bash

  # dockerize:
  #   name: Build & Push Docker Images
  #   runs-on: ubuntu-latest
  #   needs: [build-backend, build-frontend]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Log in to Docker Hub
  #       if: success() && env.DOCKER_USERNAME != null && env.DOCKER_PASSWORD != null
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build Backend Docker Image
  #       run: |
  #         cd backend
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-backend:latest .

  #     - name: Push Backend Docker Image
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/todo-backend:latest

  #     - name: Build Frontend Docker Image
  #       run: |
  #         cd frontend
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-frontend:latest .

  #     - name: Push Frontend Docker Image
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/todo-frontend:latest
